//https://leetcode.com/problems/sliding-window-maximum/
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
       /* int i=0;
        int j=0;
        list<int>l;
        vector<int>v;
        int n=nums.size();
        while(j<n)
        {
            while(l.size()>0&&nums[j]>l.back())
            {
                l.pop_back();
            }
            l.push_back(nums[j]);
            if(j-i+1<k)
            {
                j++;
            }
            else if(j-i+1==k)
            {
                   v.push_back(l.front());
                if(nums[i]==l.front())
                {
                 
                    l.pop_front();
                }
                i++;
                j++;
            }
        }
        return v;*/
      /*  int maxi;
        vector<int>v;
        for(int i=0;i<=nums.size()-k;i++)
        {
           q.push(nums[i]);
            for(int j=1;j<k;j++)
            {
              maxi=max(maxi,nums[i+j]);
          
            }
                  v.push_back(maxi);
            //maxi=INT_MIN;
        }
        return v;*/
            deque<int> dq;
        vector<int> ans;
        for (int i=0; i<nums.size(); i++) {
            if (!dq.empty() && dq.front() == i-k) dq.pop_front();
            
            while (!dq.empty() && nums[dq.back()] < nums[i])
                dq.pop_back();
            
            dq.push_back(i);
            if (i>=k-1) ans.push_back(nums[dq.front()]);
        }
        return ans;
    }
};
